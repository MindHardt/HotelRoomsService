// <auto-generated />
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Улица Труда, 179, Челябинск, 454080",
                            Name = "RadissonBlu"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Улица Труда, 153, Челябинск, 454091",
                            Name = "Малахит"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "Проспект Ленина, 26А, Челябинск, 454007",
                            Name = "Гранд отель Видгоф"
                        });
                });

            modelBuilder.Entity("Core.Entities.Room", b =>
                {
                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HotelId", "Number");

                    b.HasIndex("State");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            HotelId = 1L,
                            Number = 1,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 1L,
                            Number = 2,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 1L,
                            Number = 3,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 2L,
                            Number = 100,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 2L,
                            Number = 101,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 2L,
                            Number = 200,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 2L,
                            Number = 201,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 3L,
                            Number = 10,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 3L,
                            Number = 11,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 3L,
                            Number = 12,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 3L,
                            Number = 20,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 3L,
                            Number = 21,
                            State = "Clean"
                        },
                        new
                        {
                            HotelId = 3L,
                            Number = 22,
                            State = "Clean"
                        });
                });

            modelBuilder.Entity("Core.Entities.Room", b =>
                {
                    b.HasOne("Core.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Core.Entities.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
